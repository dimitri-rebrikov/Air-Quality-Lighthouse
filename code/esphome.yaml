esphome:
  name: $esphome_name

esp32:
  board: wemos_d1_mini32

# Enable logging
logger:
  # level: VERY_VERBOSE

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: !secret ap_password

captive_portal:

# enable api if you have home assistant server
# api:
    
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: True
  discover_ip: True 

light:
  - platform: neopixelbus
    id: led
    variant: WS2812X
    pin: GPIO13
    num_leds: 1
    restore_mode: ALWAYS_ON
    effects:
      - pulse:
          name: "Stabilizing"
          transition_length: 0.25s
          update_interval: 0.5s
          min_brightness: 50%
          max_brightness: 70%
      - pulse:
          name: "Uncertain"
          transition_length: 0.5s
          update_interval: 1s
          min_brightness: 50%
          max_brightness: 70%
      - pulse:
          name: "Calibrating"
          transition_length: 1s
          update_interval: 2s
          min_brightness: 50%
          max_brightness: 70%
      - pulse:
          name: "Warning1"
          transition_length: 0s
          update_interval: 1s
          min_brightness: 0%
          max_brightness: 70%
      - pulse:
          name: "Warning2"
          transition_length: 0s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 70%
      - pulse:
          name: "Warning3"
          transition_length: 0s
          update_interval: 0.25s
          min_brightness: 0%
          max_brightness: 70%

i2c:

bme68x_bsec2_i2c:
  address: 0x77
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V

sensor:
  - platform: bme68x_bsec2
    temperature:
      name: "BME680 Temperature"
    pressure:
      name: "BME680 Pressure"
    humidity:
      name: "BME680 Humidity"
    iaq:
      name: "BME680 IAQ"
      id: iaq
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"

text_sensor:
  - platform: bme68x_bsec2
    iaq_accuracy:
      name: "BME680 IAQ Accuracy"
      id: iaqa

  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      auto l = id(led).turn_on().set_brightness(0.7).set_effect("None");
      auto aiq = "";
      int iaq_state = int(id(iaq).state);
      std::string iaqa_state = id(iaqa).state;
      if (iaq_state <= 50) {
        aiq = "Excellent";
        l.set_rgb(0.0, 1.0, 0.0);
      }
      else if (iaq_state >= 51 && iaq_state <= 100) {
        aiq = "Good";
        l.set_rgb(0.5, 1.0, 0.0);
      }
      else if (iaq_state >= 101 && iaq_state <= 150) {
        aiq = "Lightly polluted";
        l.set_rgb(1.0, 1.0, 0.0);
      }
      else if (iaq_state >= 151 && iaq_state <= 200) {
        aiq = "Moderately polluted";
        l.set_rgb(1.0, 0.5, 0.0);
      }
      else if (iaq_state >= 201 && iaq_state <= 250) {
        aiq = "Heavily polluted";
        l.set_rgb(1.0, 0.0, 0.0);
        l.set_effect("Warning1");
      }
      else if (iaq_state >= 251 && iaq_state <= 350) {
        aiq = "Severely polluted";
        l.set_rgb(1.0, 0.0, 0.0);
        l.set_effect("Warning2");
      }
      else if (iaq_state >= 351) {
        aiq =  "Extremely polluted";
        l.set_rgb(1.0, 0.0, 0.0);
        l.set_effect("Warning3");
      }
      else {
        aiq = "error";
        l.set_rgb(1.0, 1.0, 1.0);
        l.set_effect("Warning3");
      }
      // overwrite the light effect if the sensor is not yet calibrated
      if ( iaqa_state != "Calibrated") {
        if(iaqa_state.empty()) {
          // just show white light until the IAQ accuracy is unknown
          l.set_rgb(1.0, 1.0, 1.0);
          l.set_effect("None");
        } else {
          // use the state as the name of the light effect
          l.set_effect(id(iaqa).state);
        }
      }
      l.perform();
      return {aiq};